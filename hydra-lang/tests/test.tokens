Token { token_type: Newline, lexeme: "\n", line: 5, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 6, column: 0 }
Token { token_type: Include, lexeme: "include", line: 7, column: 0 }
Token { token_type: StringLiteral("my_module"), lexeme: "\"my_module\"", line: 7, column: 8 }
Token { token_type: Semicolon, lexeme: ";", line: 7, column: 19 }
Token { token_type: Newline, lexeme: "\n", line: 7, column: 20 }
Token { token_type: Newline, lexeme: "\n", line: 8, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 9, column: 21 }
Token { token_type: Identifier("struct"), lexeme: "struct", line: 10, column: 0 }
Token { token_type: Identifier("Point"), lexeme: "Point", line: 10, column: 7 }
Token { token_type: LeftBrace, lexeme: "{", line: 10, column: 13 }
Token { token_type: Newline, lexeme: "\n", line: 10, column: 14 }
Token { token_type: Identifier("x"), lexeme: "x", line: 11, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 11, column: 5 }
Token { token_type: Identifier("f64"), lexeme: "f64", line: 11, column: 7 }
Token { token_type: Semicolon, lexeme: ";", line: 11, column: 10 }
Token { token_type: Newline, lexeme: "\n", line: 11, column: 11 }
Token { token_type: Identifier("y"), lexeme: "y", line: 12, column: 4 }
Token { token_type: Colon, lexeme: ":", line: 12, column: 5 }
Token { token_type: Identifier("f64"), lexeme: "f64", line: 12, column: 7 }
Token { token_type: Semicolon, lexeme: ";", line: 12, column: 10 }
Token { token_type: Newline, lexeme: "\n", line: 12, column: 11 }
Token { token_type: RightBrace, lexeme: "}", line: 13, column: 0 }
Token { token_type: Semicolon, lexeme: ";", line: 13, column: 1 }
Token { token_type: Newline, lexeme: "\n", line: 13, column: 2 }
Token { token_type: Newline, lexeme: "\n", line: 14, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 15, column: 19 }
Token { token_type: Typedef, lexeme: "typedef", line: 16, column: 0 }
Token { token_type: Identifier("u64"), lexeme: "u64", line: 16, column: 8 }
Token { token_type: Identifier("UserID"), lexeme: "UserID", line: 16, column: 12 }
Token { token_type: Semicolon, lexeme: ";", line: 16, column: 18 }
Token { token_type: Newline, lexeme: "\n", line: 16, column: 19 }
Token { token_type: Newline, lexeme: "\n", line: 17, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 18, column: 29 }
Token { token_type: Function, lexeme: "fn", line: 19, column: 0 }
Token { token_type: Identifier("main"), lexeme: "main", line: 19, column: 3 }
Token { token_type: LeftParen, lexeme: "(", line: 19, column: 7 }
Token { token_type: RightParen, lexeme: ")", line: 19, column: 8 }
Token { token_type: Arrow, lexeme: "->", line: 19, column: 10 }
Token { token_type: Identifier("void"), lexeme: "void", line: 19, column: 13 }
Token { token_type: LeftBrace, lexeme: "{", line: 19, column: 18 }
Token { token_type: Newline, lexeme: "\n", line: 19, column: 19 }
Token { token_type: Newline, lexeme: "\n", line: 20, column: 51 }
Token { token_type: Const, lexeme: "const", line: 21, column: 4 }
Token { token_type: Identifier("COUNT"), lexeme: "COUNT", line: 21, column: 10 }
Token { token_type: Colon, lexeme: ":", line: 21, column: 15 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 21, column: 17 }
Token { token_type: Assign, lexeme: "=", line: 21, column: 21 }
Token { token_type: IntLiteral(1000), lexeme: "1_000", line: 21, column: 23 }
Token { token_type: Semicolon, lexeme: ";", line: 21, column: 28 }
Token { token_type: Newline, lexeme: "\n", line: 21, column: 29 }
Token { token_type: Let, lexeme: "let", line: 22, column: 4 }
Token { token_type: Identifier("score"), lexeme: "score", line: 22, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 22, column: 13 }
Token { token_type: Identifier("i64"), lexeme: "i64", line: 22, column: 15 }
Token { token_type: Assign, lexeme: "=", line: 22, column: 19 }
Token { token_type: Minus, lexeme: "-", line: 22, column: 21 }
Token { token_type: IntLiteral(50), lexeme: "50", line: 22, column: 22 }
Token { token_type: Semicolon, lexeme: ";", line: 22, column: 24 }
Token { token_type: Newline, lexeme: "\n", line: 22, column: 25 }
Token { token_type: Let, lexeme: "let", line: 23, column: 4 }
Token { token_type: Identifier("rate"), lexeme: "rate", line: 23, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 23, column: 12 }
Token { token_type: Identifier("f32"), lexeme: "f32", line: 23, column: 14 }
Token { token_type: Assign, lexeme: "=", line: 23, column: 18 }
Token { token_type: FloatLiteral(0.5), lexeme: "0.5", line: 23, column: 20 }
Token { token_type: Semicolon, lexeme: ";", line: 23, column: 23 }
Token { token_type: Newline, lexeme: "\n", line: 23, column: 24 }
Token { token_type: Let, lexeme: "let", line: 24, column: 4 }
Token { token_type: Identifier("is_done"), lexeme: "is_done", line: 24, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 24, column: 15 }
Token { token_type: Identifier("boolean"), lexeme: "boolean", line: 24, column: 17 }
Token { token_type: Assign, lexeme: "=", line: 24, column: 25 }
Token { token_type: BoolLiteral(false), lexeme: "false", line: 24, column: 27 }
Token { token_type: Semicolon, lexeme: ";", line: 24, column: 32 }
Token { token_type: Newline, lexeme: "\n", line: 24, column: 33 }
Token { token_type: Let, lexeme: "let", line: 25, column: 4 }
Token { token_type: Identifier("is_pending"), lexeme: "is_pending", line: 25, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 25, column: 18 }
Token { token_type: Identifier("boolean"), lexeme: "boolean", line: 25, column: 20 }
Token { token_type: Assign, lexeme: "=", line: 25, column: 28 }
Token { token_type: BoolLiteral(true), lexeme: "true", line: 25, column: 30 }
Token { token_type: Semicolon, lexeme: ";", line: 25, column: 34 }
Token { token_type: Newline, lexeme: "\n", line: 25, column: 35 }
Token { token_type: Let, lexeme: "let", line: 26, column: 4 }
Token { token_type: Identifier("special_char"), lexeme: "special_char", line: 26, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 26, column: 20 }
Token { token_type: Identifier("char"), lexeme: "char", line: 26, column: 22 }
Token { token_type: Assign, lexeme: "=", line: 26, column: 27 }
Token { token_type: CharLiteral('\n'), lexeme: "'\\n'", line: 26, column: 29 }
Token { token_type: Semicolon, lexeme: ";", line: 26, column: 33 }
Token { token_type: Newline, lexeme: "\n", line: 26, column: 34 }
Token { token_type: Let, lexeme: "let", line: 27, column: 4 }
Token { token_type: Identifier("greeting"), lexeme: "greeting", line: 27, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 27, column: 16 }
Token { token_type: Identifier("string"), lexeme: "string", line: 27, column: 18 }
Token { token_type: Assign, lexeme: "=", line: 27, column: 25 }
Token { token_type: StringLiteral("hello \"world\""), lexeme: "\"hello \\\"world\\\"\"", line: 27, column: 27 }
Token { token_type: Semicolon, lexeme: ";", line: 27, column: 44 }
Token { token_type: Newline, lexeme: "\n", line: 27, column: 45 }
Token { token_type: Let, lexeme: "let", line: 28, column: 4 }
Token { token_type: Identifier("maybe_value"), lexeme: "maybe_value", line: 28, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 28, column: 19 }
Token { token_type: Identifier("string"), lexeme: "string", line: 28, column: 21 }
Token { token_type: Optional, lexeme: "?", line: 28, column: 27 }
Token { token_type: Assign, lexeme: "=", line: 28, column: 29 }
Token { token_type: None, lexeme: "None", line: 28, column: 31 }
Token { token_type: Semicolon, lexeme: ";", line: 28, column: 35 }
Token { token_type: Newline, lexeme: "\n", line: 28, column: 36 }
Token { token_type: Newline, lexeme: "\n", line: 29, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 30, column: 21 }
Token { token_type: Let, lexeme: "let", line: 31, column: 4 }
Token { token_type: Identifier("data"), lexeme: "data", line: 31, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 31, column: 12 }
Token { token_type: LeftBracket, lexeme: "[", line: 31, column: 14 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 31, column: 15 }
Token { token_type: Comma, lexeme: ",", line: 31, column: 18 }
Token { token_type: IntLiteral(3), lexeme: "3", line: 31, column: 20 }
Token { token_type: RightBracket, lexeme: "]", line: 31, column: 21 }
Token { token_type: Assign, lexeme: "=", line: 31, column: 23 }
Token { token_type: LeftBrace, lexeme: "{", line: 31, column: 25 }
Token { token_type: IntLiteral(1), lexeme: "1", line: 31, column: 26 }
Token { token_type: Comma, lexeme: ",", line: 31, column: 27 }
Token { token_type: IntLiteral(2), lexeme: "2", line: 31, column: 29 }
Token { token_type: Comma, lexeme: ",", line: 31, column: 30 }
Token { token_type: IntLiteral(3), lexeme: "3", line: 31, column: 32 }
Token { token_type: RightBrace, lexeme: "}", line: 31, column: 33 }
Token { token_type: Semicolon, lexeme: ";", line: 31, column: 34 }
Token { token_type: Newline, lexeme: "\n", line: 31, column: 35 }
Token { token_type: Let, lexeme: "let", line: 32, column: 4 }
Token { token_type: Identifier("first_val"), lexeme: "first_val", line: 32, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 32, column: 17 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 32, column: 19 }
Token { token_type: Assign, lexeme: "=", line: 32, column: 23 }
Token { token_type: Identifier("data"), lexeme: "data", line: 32, column: 25 }
Token { token_type: LeftBracket, lexeme: "[", line: 32, column: 29 }
Token { token_type: IntLiteral(0), lexeme: "0", line: 32, column: 30 }
Token { token_type: RightBracket, lexeme: "]", line: 32, column: 31 }
Token { token_type: Semicolon, lexeme: ";", line: 32, column: 32 }
Token { token_type: Newline, lexeme: "\n", line: 32, column: 33 }
Token { token_type: Newline, lexeme: "\n", line: 33, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 34, column: 32 }
Token { token_type: Let, lexeme: "let", line: 35, column: 4 }
Token { token_type: Identifier("calculation"), lexeme: "calculation", line: 35, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 35, column: 19 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 35, column: 21 }
Token { token_type: Assign, lexeme: "=", line: 35, column: 25 }
Token { token_type: LeftParen, lexeme: "(", line: 35, column: 27 }
Token { token_type: Identifier("COUNT"), lexeme: "COUNT", line: 35, column: 28 }
Token { token_type: Plus, lexeme: "+", line: 35, column: 34 }
Token { token_type: Identifier("score"), lexeme: "score", line: 35, column: 36 }
Token { token_type: RightParen, lexeme: ")", line: 35, column: 41 }
Token { token_type: Multiply, lexeme: "*", line: 35, column: 43 }
Token { token_type: IntLiteral(2), lexeme: "2", line: 35, column: 45 }
Token { token_type: Semicolon, lexeme: ";", line: 35, column: 46 }
Token { token_type: Newline, lexeme: "\n", line: 35, column: 47 }
Token { token_type: Let, lexeme: "let", line: 36, column: 4 }
Token { token_type: Identifier("is_equal"), lexeme: "is_equal", line: 36, column: 8 }
Token { token_type: Assign, lexeme: "=", line: 36, column: 17 }
Token { token_type: LeftParen, lexeme: "(", line: 36, column: 19 }
Token { token_type: Identifier("calculation"), lexeme: "calculation", line: 36, column: 20 }
Token { token_type: Equal, lexeme: "==", line: 36, column: 32 }
Token { token_type: IntLiteral(1900), lexeme: "1900", line: 36, column: 35 }
Token { token_type: RightParen, lexeme: ")", line: 36, column: 39 }
Token { token_type: Semicolon, lexeme: ";", line: 36, column: 40 }
Token { token_type: Newline, lexeme: "\n", line: 36, column: 41 }
Token { token_type: Let, lexeme: "let", line: 37, column: 4 }
Token { token_type: Identifier("is_not_equal"), lexeme: "is_not_equal", line: 37, column: 8 }
Token { token_type: Assign, lexeme: "=", line: 37, column: 21 }
Token { token_type: LeftParen, lexeme: "(", line: 37, column: 23 }
Token { token_type: Identifier("rate"), lexeme: "rate", line: 37, column: 24 }
Token { token_type: NotEqual, lexeme: "!=", line: 37, column: 29 }
Token { token_type: FloatLiteral(1.0), lexeme: "1.0", line: 37, column: 32 }
Token { token_type: RightParen, lexeme: ")", line: 37, column: 35 }
Token { token_type: Semicolon, lexeme: ";", line: 37, column: 36 }
Token { token_type: Newline, lexeme: "\n", line: 37, column: 37 }
Token { token_type: Let, lexeme: "let", line: 38, column: 4 }
Token { token_type: Identifier("condition"), lexeme: "condition", line: 38, column: 8 }
Token { token_type: Assign, lexeme: "=", line: 38, column: 18 }
Token { token_type: Identifier("is_equal"), lexeme: "is_equal", line: 38, column: 20 }
Token { token_type: And, lexeme: "&&", line: 38, column: 29 }
Token { token_type: Identifier("is_not_equal"), lexeme: "is_not_equal", line: 38, column: 32 }
Token { token_type: Or, lexeme: "||", line: 38, column: 45 }
Token { token_type: Not, lexeme: "!", line: 38, column: 48 }
Token { token_type: Identifier("is_done"), lexeme: "is_done", line: 38, column: 49 }
Token { token_type: Semicolon, lexeme: ";", line: 38, column: 56 }
Token { token_type: Newline, lexeme: "\n", line: 38, column: 57 }
Token { token_type: Newline, lexeme: "\n", line: 39, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 40, column: 19 }
Token { token_type: If, lexeme: "if", line: 41, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 41, column: 7 }
Token { token_type: Identifier("condition"), lexeme: "condition", line: 41, column: 8 }
Token { token_type: RightParen, lexeme: ")", line: 41, column: 17 }
Token { token_type: LeftBrace, lexeme: "{", line: 41, column: 19 }
Token { token_type: Newline, lexeme: "\n", line: 41, column: 20 }
Token { token_type: Let, lexeme: "let", line: 42, column: 8 }
Token { token_type: Identifier("x"), lexeme: "x", line: 42, column: 12 }
Token { token_type: Colon, lexeme: ":", line: 42, column: 13 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 42, column: 15 }
Token { token_type: Assign, lexeme: "=", line: 42, column: 19 }
Token { token_type: IntLiteral(1), lexeme: "1", line: 42, column: 21 }
Token { token_type: Semicolon, lexeme: ";", line: 42, column: 22 }
Token { token_type: Newline, lexeme: "\n", line: 42, column: 23 }
Token { token_type: RightBrace, lexeme: "}", line: 43, column: 4 }
Token { token_type: Else, lexeme: "else", line: 43, column: 6 }
Token { token_type: If, lexeme: "if", line: 43, column: 11 }
Token { token_type: LeftParen, lexeme: "(", line: 43, column: 14 }
Token { token_type: Identifier("is_pending"), lexeme: "is_pending", line: 43, column: 15 }
Token { token_type: RightParen, lexeme: ")", line: 43, column: 25 }
Token { token_type: LeftBrace, lexeme: "{", line: 43, column: 27 }
Token { token_type: Newline, lexeme: "\n", line: 43, column: 28 }
Token { token_type: Let, lexeme: "let", line: 44, column: 8 }
Token { token_type: Identifier("y"), lexeme: "y", line: 44, column: 12 }
Token { token_type: Colon, lexeme: ":", line: 44, column: 13 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 44, column: 15 }
Token { token_type: Assign, lexeme: "=", line: 44, column: 19 }
Token { token_type: IntLiteral(2), lexeme: "2", line: 44, column: 21 }
Token { token_type: Semicolon, lexeme: ";", line: 44, column: 22 }
Token { token_type: Newline, lexeme: "\n", line: 44, column: 23 }
Token { token_type: RightBrace, lexeme: "}", line: 45, column: 4 }
Token { token_type: Else, lexeme: "else", line: 45, column: 6 }
Token { token_type: LeftBrace, lexeme: "{", line: 45, column: 11 }
Token { token_type: Newline, lexeme: "\n", line: 45, column: 12 }
Token { token_type: Let, lexeme: "let", line: 46, column: 8 }
Token { token_type: Identifier("z"), lexeme: "z", line: 46, column: 12 }
Token { token_type: Colon, lexeme: ":", line: 46, column: 13 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 46, column: 15 }
Token { token_type: Assign, lexeme: "=", line: 46, column: 19 }
Token { token_type: IntLiteral(3), lexeme: "3", line: 46, column: 21 }
Token { token_type: Semicolon, lexeme: ";", line: 46, column: 22 }
Token { token_type: Newline, lexeme: "\n", line: 46, column: 23 }
Token { token_type: RightBrace, lexeme: "}", line: 47, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 47, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 48, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 49, column: 12 }
Token { token_type: While, lexeme: "while", line: 50, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 50, column: 10 }
Token { token_type: Identifier("is_done"), lexeme: "is_done", line: 50, column: 11 }
Token { token_type: RightParen, lexeme: ")", line: 50, column: 18 }
Token { token_type: LeftBrace, lexeme: "{", line: 50, column: 20 }
Token { token_type: Newline, lexeme: "\n", line: 50, column: 21 }
Token { token_type: Break, lexeme: "break", line: 51, column: 8 }
Token { token_type: Semicolon, lexeme: ";", line: 51, column: 13 }
Token { token_type: Newline, lexeme: "\n", line: 51, column: 14 }
Token { token_type: RightBrace, lexeme: "}", line: 52, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 52, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 53, column: 0 }
Token { token_type: Let, lexeme: "let", line: 54, column: 4 }
Token { token_type: Identifier("i"), lexeme: "i", line: 54, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 54, column: 9 }
Token { token_type: Identifier("i32"), lexeme: "i32", line: 54, column: 11 }
Token { token_type: Assign, lexeme: "=", line: 54, column: 15 }
Token { token_type: IntLiteral(0), lexeme: "0", line: 54, column: 17 }
Token { token_type: Semicolon, lexeme: ";", line: 54, column: 18 }
Token { token_type: Newline, lexeme: "\n", line: 54, column: 19 }
Token { token_type: While, lexeme: "while", line: 55, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 55, column: 10 }
Token { token_type: Identifier("i"), lexeme: "i", line: 55, column: 11 }
Token { token_type: LeftAngle, lexeme: "<", line: 55, column: 13 }
Token { token_type: IntLiteral(10), lexeme: "10", line: 55, column: 15 }
Token { token_type: RightParen, lexeme: ")", line: 55, column: 17 }
Token { token_type: LeftBrace, lexeme: "{", line: 55, column: 19 }
Token { token_type: Newline, lexeme: "\n", line: 55, column: 20 }
Token { token_type: Identifier("i"), lexeme: "i", line: 56, column: 8 }
Token { token_type: PlusAssign, lexeme: "+=", line: 56, column: 10 }
Token { token_type: IntLiteral(1), lexeme: "1", line: 56, column: 13 }
Token { token_type: Semicolon, lexeme: ";", line: 56, column: 14 }
Token { token_type: Newline, lexeme: "\n", line: 56, column: 15 }
Token { token_type: If, lexeme: "if", line: 57, column: 8 }
Token { token_type: LeftParen, lexeme: "(", line: 57, column: 11 }
Token { token_type: Identifier("i"), lexeme: "i", line: 57, column: 12 }
Token { token_type: Modulo, lexeme: "%", line: 57, column: 14 }
Token { token_type: IntLiteral(2), lexeme: "2", line: 57, column: 16 }
Token { token_type: Equal, lexeme: "==", line: 57, column: 18 }
Token { token_type: IntLiteral(0), lexeme: "0", line: 57, column: 21 }
Token { token_type: RightParen, lexeme: ")", line: 57, column: 22 }
Token { token_type: LeftBrace, lexeme: "{", line: 57, column: 24 }
Token { token_type: Newline, lexeme: "\n", line: 57, column: 25 }
Token { token_type: Skip, lexeme: "skip", line: 58, column: 12 }
Token { token_type: Semicolon, lexeme: ";", line: 58, column: 16 }
Token { token_type: Newline, lexeme: "\n", line: 58, column: 48 }
Token { token_type: RightBrace, lexeme: "}", line: 59, column: 8 }
Token { token_type: Newline, lexeme: "\n", line: 59, column: 9 }
Token { token_type: RightBrace, lexeme: "}", line: 60, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 60, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 61, column: 0 }
Token { token_type: Newline, lexeme: "\n", line: 62, column: 40 }
Token { token_type: For, lexeme: "for", line: 63, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 63, column: 8 }
Token { token_type: Identifier("idx"), lexeme: "idx", line: 63, column: 9 }
Token { token_type: In, lexeme: "in", line: 63, column: 13 }
Token { token_type: IntLiteral(0), lexeme: "0", line: 63, column: 16 }
Token { token_type: RangeExclusive, lexeme: "..", line: 63, column: 17 }
Token { token_type: IntLiteral(100), lexeme: "100", line: 63, column: 19 }
Token { token_type: RightParen, lexeme: ")", line: 63, column: 22 }
Token { token_type: LeftBrace, lexeme: "{", line: 63, column: 24 }
Token { token_type: Newline, lexeme: "\n", line: 63, column: 25 }
Token { token_type: Newline, lexeme: "\n", line: 64, column: 26 }
Token { token_type: RightBrace, lexeme: "}", line: 65, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 65, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 66, column: 4 }
Token { token_type: Let, lexeme: "let", line: 67, column: 4 }
Token { token_type: Identifier("other_data"), lexeme: "other_data", line: 67, column: 8 }
Token { token_type: Colon, lexeme: ":", line: 67, column: 18 }
Token { token_type: LeftBracket, lexeme: "[", line: 67, column: 20 }
Token { token_type: Identifier("char"), lexeme: "char", line: 67, column: 21 }
Token { token_type: Comma, lexeme: ",", line: 67, column: 25 }
Token { token_type: IntLiteral(2), lexeme: "2", line: 67, column: 27 }
Token { token_type: RightBracket, lexeme: "]", line: 67, column: 28 }
Token { token_type: Assign, lexeme: "=", line: 67, column: 30 }
Token { token_type: LeftBrace, lexeme: "{", line: 67, column: 32 }
Token { token_type: CharLiteral('a'), lexeme: "'a'", line: 67, column: 33 }
Token { token_type: Comma, lexeme: ",", line: 67, column: 36 }
Token { token_type: CharLiteral('b'), lexeme: "'b'", line: 67, column: 38 }
Token { token_type: RightBrace, lexeme: "}", line: 67, column: 41 }
Token { token_type: Semicolon, lexeme: ";", line: 67, column: 42 }
Token { token_type: Newline, lexeme: "\n", line: 67, column: 43 }
Token { token_type: ForEach, lexeme: "forEach", line: 68, column: 4 }
Token { token_type: LeftParen, lexeme: "(", line: 68, column: 11 }
Token { token_type: Identifier("c"), lexeme: "c", line: 68, column: 12 }
Token { token_type: In, lexeme: "in", line: 68, column: 14 }
Token { token_type: Identifier("other_data"), lexeme: "other_data", line: 68, column: 17 }
Token { token_type: RightParen, lexeme: ")", line: 68, column: 27 }
Token { token_type: LeftBrace, lexeme: "{", line: 68, column: 29 }
Token { token_type: Newline, lexeme: "\n", line: 68, column: 30 }
Token { token_type: Newline, lexeme: "\n", line: 69, column: 64 }
Token { token_type: Let, lexeme: "let", line: 70, column: 8 }
Token { token_type: Identifier("p"), lexeme: "p", line: 70, column: 12 }
Token { token_type: Colon, lexeme: ":", line: 70, column: 13 }
Token { token_type: Identifier("Point"), lexeme: "Point", line: 70, column: 15 }
Token { token_type: Optional, lexeme: "?", line: 70, column: 20 }
Token { token_type: Assign, lexeme: "=", line: 70, column: 22 }
Token { token_type: Identifier("Point"), lexeme: "Point", line: 70, column: 24 }
Token { token_type: LeftBrace, lexeme: "{", line: 70, column: 29 }
Token { token_type: Identifier("x"), lexeme: "x", line: 70, column: 30 }
Token { token_type: Assign, lexeme: "=", line: 70, column: 31 }
Token { token_type: FloatLiteral(1.0), lexeme: "1.0", line: 70, column: 32 }
Token { token_type: Comma, lexeme: ",", line: 70, column: 35 }
Token { token_type: Identifier("y"), lexeme: "y", line: 70, column: 37 }
Token { token_type: Assign, lexeme: "=", line: 70, column: 38 }
Token { token_type: FloatLiteral(2.0), lexeme: "2.0", line: 70, column: 39 }
Token { token_type: RightBrace, lexeme: "}", line: 70, column: 42 }
Token { token_type: Semicolon, lexeme: ";", line: 70, column: 43 }
Token { token_type: Newline, lexeme: "\n", line: 70, column: 44 }
Token { token_type: Let, lexeme: "let", line: 71, column: 8 }
Token { token_type: Identifier("p_ref"), lexeme: "p_ref", line: 71, column: 12 }
Token { token_type: Assign, lexeme: "=", line: 71, column: 18 }
Token { token_type: Reference, lexeme: "&", line: 71, column: 20 }
Token { token_type: Identifier("p"), lexeme: "p", line: 71, column: 21 }
Token { token_type: Semicolon, lexeme: ";", line: 71, column: 22 }
Token { token_type: Newline, lexeme: "\n", line: 71, column: 23 }
Token { token_type: RightBrace, lexeme: "}", line: 72, column: 4 }
Token { token_type: Newline, lexeme: "\n", line: 72, column: 5 }
Token { token_type: Newline, lexeme: "\n", line: 73, column: 4 }
Token { token_type: Return, lexeme: "return", line: 74, column: 4 }
Token { token_type: Semicolon, lexeme: ";", line: 74, column: 10 }
Token { token_type: Newline, lexeme: "\n", line: 74, column: 11 }
Token { token_type: RightBrace, lexeme: "}", line: 75, column: 0 }
Token { token_type: Eof, lexeme: "", line: 75, column: 1 }