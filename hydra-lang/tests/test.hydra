/*
 * This is a pure syntax test file for the Hydra language tokenizer.
 * It includes all keywords, operators, literals, and syntax structures
 * defined in the language specification.
 */

include "my_module";

// Struct definitions
struct Point {
    x: f64;
    y: f64;
};

// Typedef aliasing
typedef u64 UserID;

// --- Function and Logic ---
fn main() -> void {
    // Variable declarations with all literal types
    const COUNT: i32 = 1_000;
    let score: i64 = -50;
    let rate: f32 = 0.5;
    let is_done: boolean = false;
    let is_pending: boolean = true;
    let special_char: char = '\n';
    let greeting: string = "hello \"world\"";
    let maybe_value: string? = None;

    // Array literals
    let data: [i32, 3] = {1, 2, 3};
    let first_val: i32 = data[0];

    // Operators and expressions
    let calculation: i32 = (COUNT + score) * 2;
    let is_equal = (calculation == 1900);
    let is_not_equal = (rate != 1.0);
    let condition = is_equal && is_not_equal || !is_done;

    // Control flow
    if (condition) {
        let x: i32 = 1;
    } else if (is_pending) {
        let y: i32 = 2;
    } else {
        let z: i32 = 3;
    }

    // Loops
    while (is_done) {
        break;
    }

    let i: i32 = 0;
    while (i < 10) {
        i += 1;
        if (i % 2 == 0) {
            skip; // Skips to the next iteration
        }
    }

    // For loops with ranges and symbols
    for (idx in 0..100) {
        // exclusive range
    }
    
    let other_data: [char, 2] = {'a', 'b'};
    forEach(c in other_data) {
        // Test member access, function calls, and special chars
        let p: Point? = Point{x=1.0, y=2.0};
        let p_ref = &p;
    }
    
    return;
}