//! src/hydrac/parse/parser/ast.rs
//!
//! This file defines the Abstract Syntax Tree (AST) for the Hydra language.
//! The AST is a tree representation of the source code that is generated by the parser.
//! It's designed to be easily traversed by later compiler passes, such as the type checker
//! and code generator. Each node in the tree represents a construct in the language,
//! like a statement, expression, or type definition.

use crate::hydrac::parse::lexer::token::Token;

// Expression Enum
pub enum Expression {
    Literal(TokenType),
}

pub struct TypeAnnotation {
    pub name: String,
    pub is_optional: bool,
}

// Variable Declaration
pub struct VariableDeclaration {
    pub is_constant: bool,
    pub name: String,
    pub var_type: TypeAnnotation,
    pub initializer: Expression,
}

pub struct Parser<'a> {
    tokens: &'a [Token<'a>],
    current: usize,
}

impl<'a> Parser<'a> {
    
}
